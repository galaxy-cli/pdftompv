#!/bin/bash
#        _ __   __| |/ _| |_ ___  _ __ ___  _ ____   __
#       | '_ \ / _` | |_| __/ _ \| '_ ` _ \| '_ \ \ / /
#       | |_) | (_| |  _| || (_) | | | | | | |_) \ V /
#       | .__/ \__,_|_|  \__\___/|_| |_| |_| .__/ \_/
#       |_|                                |_|
# pdftompv - PDF to MP3 converter utility using pdftotext, text2wave (Festival), LAME, and MPV
# Author: galaxy-cli
# Project: https://github.com/galaxy-cli/check

# --- Dependency checks ---
check_and_install_package() {
    pkg="$1"
    if ! dpkg -s "$pkg" &>/dev/null; then
        echo "Error: '$pkg' is required but not installed."
        read -p "Would you like to install it now? (y/n) " answer
        case "$answer" in
            y|Y|yes|YES)
                echo "Attempting to install $pkg..."
                if command -v apt-get &> /dev/null; then
                    sudo apt-get update && sudo apt-get install -y "$pkg"
                else
                    echo "Package manager not detected. Please install '$pkg' manually."
                    exit 1
                fi
                ;;
            *)
                echo "$pkg is required to run this script. Exiting."
                exit 1
                ;;
        esac
    fi
}
check_and_install_package poppler-utils

check_commands() {
    for cmd in wget festival lame mpv; do
        if ! command -v "$cmd" &> /dev/null; then
            echo "Error: '$cmd' is required but not installed."
            read -p "Would you like to install it now? (y/n) " answer
            case "$answer" in
                y|Y|yes|YES)
                    echo "Attempting to install $cmd..."
                    if command -v apt-get &> /dev/null; then
                        sudo apt-get update && sudo apt-get install -y "$cmd"
                    else
                        echo "Package manager not detected. Please install '$cmd' manually."
                        exit 1
                    fi
                    ;;
                *)
                    echo "$cmd is required to run this script. Exiting."
                    exit 1
                    ;;
            esac
        fi
    done
}
check_commands

# --- Functions ---
print_usage() {
  cat <<EOF
USAGE:
  pdftompv [OPTIONS] input

OPTIONS:
  --pdf       Convert PDF file to MP3
  --open      Open PDF file and play MP3
  --url       Download PDF from URL before processing

EXAMPLES:
  pdftompv --pdf book.pdf
  pdftompv --url https://example.com/file.pdf --pdf
  pdftompv --open book.pdf
EOF
}

convert_pdf_to_mp3() {
    pdf="$1"
    if [[ ! -f "$pdf" || "${pdf##*.}" != "pdf" ]]; then
        echo "Please provide a valid PDF file."
        exit 1
    fi

    echo "Coverting to MP3..."
    txt="${pdf%.pdf}.txt"
    mp3="${txt%.txt}.mp3"
    trap 'rm -f "$txt"' INT EXIT

    pdftotext -raw "$pdf" "$txt" || { echo "pdftotext failed"; exit 1; }
    text2wave "$txt" | lame - "$mp3" || { echo "Conversion to MP3 failed"; exit 1; }
    echo "MP3 created: $mp3"
}

open_file() {
    local file="$1"
    if command -v xdg-open &>/dev/null; then
        xdg-open "$file" &
    elif command -v open &>/dev/null; then
        open "$file" &
    else
        echo "Error: Cannot find a command to open files on your system."
        exit 1
    fi
}

open_pdf_and_mp3() {
    local pdf="$1"
    local mp3="$2"
    open_file "$pdf"
    mpv "$mp3"
}

download_pdf() {
    url="$1"
    # Extract filename from URL
    filename="${url##*/}"
    # Optional: Check if it ends with .pdf
    if [[ "${filename##*.}" != "pdf" ]]; then
        echo "URL does not appear to be a PDF file."
        exit 1
    fi
    # Download using wget
    wget -O "$filename" "$url" || { echo "Download failed."; exit 1; }
    echo "Downloaded PDF: $filename"
}

# --- Argument parsing ---
input=""
url=""
do_pdf=0
do_open=0

while [[ $# -gt 0 ]]; do
    case "$1" in
        --pdf)
            do_pdf=1
            shift
            ;;
        --open)
            do_open=1
            shift
            ;;
        --url)
            url=1
            shift
            ;;
        *)
            # Assume first non-flag is the input (file or URL)
            if [[ -z "$input" ]]; then
                input="$1"
            else
                echo "Unknown argument: $1"
                exit 1
            fi
            shift
            ;;
    esac
done

# --- Logic based on flags ---
if [[ -z "$input" ]]; then
    print_usage
    exit 1
fi

# If --url, download the PDF first
if [[ "$url" == "1" ]]; then
    download_pdf "$input"
    # After downloading, set input to the filename
    filename="${input##*/}"
    input="$filename"
fi

# If --pdf, convert to mp3
if [[ "$do_pdf" == "1" ]]; then
    convert_pdf_to_mp3 "$input"
fi

# If --open, open PDF and MP3
if [[ "$do_open" == "1" ]]; then
    base="${input%.pdf}"
    mp3="${base}.mp3"
    if [[ -f "$mp3" ]]; then
        open_pdf_and_mp3 "$input" "$mp3"
    else
        # Only open the PDF if MP3 doesn't exist
        if [[ -f "$input" && "${input##*.}" == "pdf" ]]; then
            open "$input"
        else
            echo "No PDF file to open."
            exit 1
        fi
    fi
fi
